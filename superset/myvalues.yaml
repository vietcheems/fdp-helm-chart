service:
  type: NodePort
  nodePort:
    http: 30007
postgresql:
  enabled: false
supersetNode:
  replicaCount: 9
  connections:
    db_host: "timescaledb.fdp.svc.cluster.local"
    db_port: "5432"
    db_user: superset
    db_pass: superset
    db_name: superset
  resources:
    limits:
      cpu: 2000m
      memory: 2560Mi
    requests:
      cpu: 200m
      memory: 256Mi
supersetCeleryBeat:
  enabled: true
image:
  repository: perceptiveperceval/thesis
  tag: "sha-6eb5645"
configOverrides:
  save_query: |
    SAVE_QUERY_SCHEMA = "financial_query"
    AVAILABLE_SCHEMAS = ["prediction","marts","user"]
    SAVE_QUERY_TABLE = "query"
  registration: |
    from flask_appbuilder.security.manager import AUTH_DB
    AUTH_TYPE = AUTH_DB

    AUTH_ROLE_ADMIN = 'Admin'

    AUTH_ROLE_PUBLIC = 'User'


    AUTH_USER_REGISTRATION = True

    AUTH_USER_REGISTRATION_ROLE = "Public"


    RECAPTCHA_PUBLIC_KEY = '6LestignAAAAAP09-EZCr5RykOBJ1hiZmCXHy8AP'
    RECAPTCHA_PRIVATE_KEY = '6LestignAAAAAHTd_vToS55axYh0Lx07qQIoWIOd'

    MAIL_SERVER = 'smtp.gmail.com'
    MAIL_USE_TLS = True
    MAIL_USERNAME = 'catvusuperset@gmail.com'
    MAIL_PASSWORD = 'iphqwawmeqrtcyfv'
    MAIL_DEFAULT_SENDER = 'catvusuperset@gmail.com'
    MAIL_PORT = 587
  feature_flags: |
    FEATURE_FLAGS = {
    'SQL_VALIDATORS_BY_ENGINE': {
    'postgresql': 'PostgreSQLValidator'},
    "ALERT_REPORTS": True,
    "ENABLE_TEMPLATE_PROCESSING": True,
    "DRILL_TO_DETAIL": True,
    "DASHBOARD_CROSS_FILTERS": True
    }
  alert: |
    import ast
    SMTP_HOST = "smtp.gmail.com"
    SMTP_STARTTLS = ast.literal_eval(os.getenv("SMTP_STARTTLS", "False"))
    SMTP_SSL = ast.literal_eval(os.getenv("SMTP_SSL", "True"))
    SMTP_USER = "catvusuperset@gmail.com"
    SMTP_PORT = os.getenv("SMTP_PORT",465)
    SMTP_PASSWORD = "iphqwawmeqrtcyfv"
    SMTP_MAIL_FROM = os.getenv("SMTP_MAIL_FROM","catvusuperset@gmail.com")
    WEBDRIVER_BASEURL = "http://superset:8088/"
  redis_setup: |
    from cachelib import RedisCache
    from celery.schedules import crontab
    from superset.superset_typing import CacheConfig



    REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
    REDIS_PORT = os.environ.get("REDIS_PORT", 6379)

    CACHE_CONFIG: CacheConfig = {
        "CACHE_TYPE": "RedisCache",
        "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
        "CACHE_KEY_PREFIX": "superset_cache_",
        "CACHE_REDIS_URL": "redis://%s:%s/2" % (REDIS_HOST, REDIS_PORT),
    }

    DATA_CACHE_CONFIG: CacheConfig = {
        "CACHE_TYPE": "RedisCache",
        "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
        "CACHE_KEY_PREFIX": "superset_data_cache_",
        "CACHE_REDIS_URL": "redis://%s:%s/3" % (REDIS_HOST, REDIS_PORT),
    }

    FILTER_STATE_CACHE_CONFIG: CacheConfig = {
        "CACHE_TYPE": "RedisCache",
        "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
        "CACHE_KEY_PREFIX": "superset_filterstate_",
        "CACHE_REDIS_URL": "redis://%s:%s/5" % (REDIS_HOST, REDIS_PORT),
    }

    EXPLORE_FORM_DATA_CACHE_CONFIG: CacheConfig = {
        "CACHE_TYPE": "RedisCache",
        "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
        "CACHE_KEY_PREFIX": "superset_formdata_",
        "CACHE_REDIS_URL": "redis://%s:%s/6" % (REDIS_HOST, REDIS_PORT),
    }

    RESULTS_BACKEND = RedisCache(
        host=REDIS_HOST, port=REDIS_PORT, key_prefix="superset_results_"
    )


    class CeleryConfig(object):
        broker_url = "redis://%s:%s/0" % (REDIS_HOST, REDIS_PORT)
        imports = (
            "superset.sql_lab",
            "superset.tasks",
            "superset.tasks.thumbnails",
        )
        result_backend = "redis://%s:%s/0" % (REDIS_HOST, REDIS_PORT)
        worker_log_level = "DEBUG"
        worker_prefetch_multiplier = 10
        task_acks_late = True
        task_annotations = {
            "sql_lab.get_sql_results": {
                "rate_limit": "100/s",
            },
            "email_reports.send": {
                "rate_limit": "1/s",
                "time_limit": 120,
                "soft_time_limit": 150,
                "ignore_result": True,
            },
        }
        beat_schedule = {
            "email_reports.schedule_hourly": {
              "task": "email_reports.schedule_hourly",
              "schedule": crontab(minute=1, hour="*"),
            },
            'reports.scheduler': {
              'task': 'reports.scheduler',
              'schedule': crontab(minute='*', hour='*'),
          },
            'reports.prune_log': {
              'task': 'reports.prune_log',
              'schedule': crontab(minute=0, hour=0),
          },
            'cache-warmup-hourly': {
              'task': 'cache-warmup',
              'schedule': crontab(minute='*/30', hour='*'),
              'kwargs': {
                  'strategy_name': 'top_n_dashboards',
                  'top_n': 10,
                  'since': '7 days ago',
              },
          }
        }


    CELERY_CONFIG = CeleryConfig
supersetWorker:
  replicaCount: 1
  command:
    - "/bin/sh"
    - "-c"
    - "apt-get update -y && apt-get update -y \\\n&& apt-get install -y --no-install-recommends \\\n    libnss3 \\\n    libdbus-glib-1-2 \\\n    libgtk-3-0 \\\n    libx11-xcb1 \\\n    libasound2 \\\n    libxtst6 \\\n    wget \\\n    unzip\nGECKODRIVER_VERSION=v0.32.0\nFIREFOX_VERSION=106.0.3    \n# Install GeckoDriver WebDriver    \nwget https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz -O /tmp/geckodriver.tar.gz && \\\n  tar xvfz /tmp/geckodriver.tar.gz -C /tmp && \\\n  mv /tmp/geckodriver /usr/local/bin/geckodriver && \\\n  rm /tmp/geckodriver.tar.gz  \n\n# Install Firefox\nwget https://download-installer.cdn.mozilla.net/pub/firefox/releases/${FIREFOX_VERSION}/linux-x86_64/en-US/firefox-${FIREFOX_VERSION}.tar.bz2 -O /opt/firefox.tar.bz2 && \\\n     tar xvf /opt/firefox.tar.bz2 -C /opt && \\\n     ln -s /opt/firefox/firefox /usr/local/bin/firefox    \n\n. {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker\n"
  resources:
    requests:
      cpu: 1000m
      memory: 1024Mi

service:
  type: NodePort
  nodePort:
    http: 30007
postgresql:
  enabled: false
supersetNode:
  replicaCount: 4
  connections:
    db_host: 'timescaledb.fdp.svc.cluster.local'
    db_port: "5432"
    db_user: superset
    db_pass: superset
    db_name: superset
  resources:
    limits:
      cpu: 2000m
      memory: 2560Mi
    requests:
      cpu: 200m
      memory: 256Mi
supersetCeleryBeat:
  enabled: true
image:
  repository: perceptiveperceval/thesis
  tag: "sha-83d26cf"
configOverrides:
  override_file: |
    SAVE_QUERY_SCHEMA = "financial_query"
    AVAILABLE_SCHEMAS = ["financial_clean", "financial_user", "sources"]
    SAVE_QUERY_TABLE = "query"
  registration: |
    from flask_appbuilder.security.manager import AUTH_DB

    AUTH_TYPE = AUTH_DB

    AUTH_ROLE_ADMIN = 'Admin'

    AUTH_ROLE_PUBLIC = 'User'


    AUTH_USER_REGISTRATION = True

    AUTH_USER_REGISTRATION_ROLE = "Public"


    RECAPTCHA_PUBLIC_KEY = '6Lf1RyknAAAAAORd0Z-PjmKO756Q_N3LPr5pqLTe'
    RECAPTCHA_PRIVATE_KEY = '6Lf1RyknAAAAABZayhC0VV2eZhVtKiwNiTZHsG2Q'

    MAIL_SERVER = 'smtp.gmail.com'
    MAIL_USE_TLS = True
    MAIL_USERNAME = 'catvusuperset@gmail.com'
    MAIL_PASSWORD = 'iphqwawmeqrtcyfv'
    MAIL_DEFAULT_SENDER = 'catvusuperset@gmail.com'
    MAIL_PORT = 587
  redis_setup:  |
      from cachelib import RedisCache
      from celery.schedules import crontab
      from superset.superset_typing import CacheConfig
      FEATURE_FLAGS = {
          "ALERT_REPORTS": True,
          "ENABLE_TEMPLATE_PROCESSING": True,
      }
      REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
      REDIS_PORT = os.environ.get("REDIS_PORT", 6379)
      CACHE_CONFIG: CacheConfig = {
          "CACHE_TYPE": "RedisCache",
          "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
          "CACHE_KEY_PREFIX": "superset_cache_",
          "CACHE_REDIS_URL": "redis://%s:%s/2" % (REDIS_HOST, REDIS_PORT),
      }
      DATA_CACHE_CONFIG: CacheConfig = {
          "CACHE_TYPE": "RedisCache",
          "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
          "CACHE_KEY_PREFIX": "superset_data_cache_",
          "CACHE_REDIS_URL": "redis://%s:%s/3" % (REDIS_HOST, REDIS_PORT),
      }
      FILTER_STATE_CACHE_CONFIG: CacheConfig = {
          "CACHE_TYPE": "RedisCache",
          "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
          "CACHE_KEY_PREFIX": "superset_filterstate_",
          "CACHE_REDIS_URL": "redis://%s:%s/5" % (REDIS_HOST, REDIS_PORT),
      }
      EXPLORE_FORM_DATA_CACHE_CONFIG: CacheConfig = {
          "CACHE_TYPE": "RedisCache",
          "CACHE_DEFAULT_TIMEOUT": 60 * 60 * 2,
          "CACHE_KEY_PREFIX": "superset_formdata_",
          "CACHE_REDIS_URL": "redis://%s:%s/6" % (REDIS_HOST, REDIS_PORT),
      }
      RESULTS_BACKEND = RedisCache(
          host=REDIS_HOST, port=REDIS_PORT, key_prefix="superset_results_"
      )
      class CeleryConfig(object):
          broker_url = "redis://%s:%s/0" % (REDIS_HOST, REDIS_PORT)
          imports = (
              "superset.sql_lab",
              "superset.tasks",
          )
          result_backend = "redis://%s:%s/0" % (REDIS_HOST, REDIS_PORT)
          worker_log_level = "DEBUG"
          worker_prefetch_multiplier = 10
          task_acks_late = True
          task_annotations = {
              "sql_lab.get_sql_results": {
                  "rate_limit": "100/s",
              },
              "email_reports.send": {
                  "rate_limit": "1/s",
                  "time_limit": 120,
                  "soft_time_limit": 150,
                  "ignore_result": True,
              },
          }
          beat_schedule = {
              "email_reports.schedule_hourly": {
                  "task": "email_reports.schedule_hourly",
                  "schedule": crontab(minute=1, hour="*"),
              },
          }
      CELERY_CONFIG = CeleryConfig
